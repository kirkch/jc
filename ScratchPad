
TODO:  (ahead of the cut)
==================


TODO running JC should run tests and fail if they fail

TODO dependency files support exclude scope

TODO package JAR
TODO package FATJAR
TODO package IVYJAR
TODO package MAVENJAR
TODO manifest line limit for class path

TODO support comments in dependencies file
#com.mosaic         : threadtesting-mosaic : 0.0.1-SNAPSHOT     <test>



auto update dependencies:

jc dependency-tree
jc dependency-update
jc dependency-check


Cloud Build
Cloud Mosaic
Software Mosaic
Mega Maid
Red 6


repos

meta:
supportSnapshots = true   # defaults to false


To upload to a repo, from command line:

> jc upload [RepoName]


meta:
releaseRepos=a,b,c
releaseSourceCode=true
releaseJavaDocs=true
artifacts=a,b,c   # defaults to 'project'



    <distributionManagement>
        <repository>
            <id>softwaremosaic-nexus</id>
            <name>Releases</name>
            <url>http://nexus.private.softwaremosaic.co.uk:8002/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>softwaremosaic-nexus</id>
            <name>Snapshots</name>
            <url>http://nexus.private.softwaremosaic.co.uk:8002/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>


<settings>
  <servers>
    <server>
       <id>softwaremosaic-nexus</id>
       <username>deployment</username>
       <password>$$$$$$</password>
     </server>
  </servers>
</settings>


Detect SCM
-------

    <scm>
        <developerConnection>scm:svn:<Subversion project path to trunk here></developerConnection>
        <connection>scm:svn:<Subversion project path to trunk here></connection>
        <url><Subversion project path to trunk here></url>
    </scm>


    <url><!-- url here --></url>

    <organization>
       <!-- organization here -->
    </organization>

    <developers>
      <!-- developers here -->
    </developers>


add to .gitignore



mvn idea:idea
   still gets test modules wrong



version scheme
-------------

Does not support SNAPSHOT builds; SNAPSHOT is not Continuous Deployment friendly.


starts from 0.0.1, override in project/config  (eg version=0.0.2)

builds to 0.0.1-{buildName}_{buildNum}

eg  0.0.1-ck_23
or  0.0.1-release_10

The name defaults to the OS user name.  Can be overridden with -DbuildName=release. Useful for CI builds.


The build number starts from 1 and increments each time jc is run.  The incrementing number is stored to disk
in ~/.jc/{project}/buildnumber.  Thus number is not transferred between machines.

A custom number can be passed in via -DbuildNumber=X.  Useful for integrating with builds, which manage their
own build number.


Q: How to manage dependency clashes
Q: How to know when new versions exist
Q: How long to keep 'old' builds around
Q: How to manage local and remote repositories


idea: place maven repos and dep refs in META-INF
  new bootstrap class loader downloads if dependencies are not found

idea: keep last used timestamp on dependencies
      have a clean out of really old unused stuff
      ttl changable by tags (eg release very long, ck frequent)


Packaging
----

Fat jar or thin jar?

Each module, or one with main?

What if there are multiple mains?


Git support
----

Tag releases
Include git hash in jar files


Plugin support
----



MicroBenchmark support
--------





Usages:

jc    (compile, test, package

jc compile
jc test
jc package


jc install
jc




Repository
==========

On Upload:
- is jar backwards compatible with last version?
    - removing deprecated stuff is okay
- stats on download counts/ref usage
- alert to dependency clashes
- prune unused libs (re-build on use)


- hooks to standard docs
    - release notes
    - bug reports
    - bug stats
    - forums
    - documentation
    - road map
    - voting
    - stack overflow feed
    - code coverage
    - developer stats


- capture exceptions while running


- auto support for jClarity?




AWS


project meta
    ami
    min machine size

environment meta
    facebook credentials
    dns


