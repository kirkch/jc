
TODO:  (ahead of the cut)
==================


TODO running JC should run tests and fail if they fail
TODO override project name from config

TODO dependency files support exclude scope

TODO package JAR
TODO package FATJAR
TODO package IVYJAR
TODO package MAVENJAR
TODO manifest line limit for class path

TODO support empty release name; designed for CI builds

#com.mosaic         : threadtesting-mosaic : 0.0.1-SNAPSHOT     <test>


TODO separate ivy download time from compile time


auto update dependencies:

jc dependency-tree      or write dependency tree every run to target/dependency-tree
jc dependency-update
jc dependency-check     or async check in the background and issue warning when changed;
                        flag to write updates on next run?


copy resources into jar file
generate files to include in jar  (both from scratch, and from templates)


track usage  (sha1(mac)+cmd+duration)


run jc twice; no work on second (timestamp checks)


support 'jc <dir>'
   - jc               compiles all src to project.jar   and all tests to  tests.jar  and runs tests   (good for boot strapping simple projects - no build tool required)
   - jc <dir>         compiles dir to dir.jar    (simple/single job - good for embedding into build tool)
   - jc <dir> <dir>   compiles multiple dirs


test jar has Main that fires junit off


    // compile dir
    // compile moduleName

    // module to jar;   what about dependents?

    // compile      -- detect src and test directories


in file artifacts file


artifactName: artifactType(modulesToIncludeInArtifact,...)


moduleJarName: jar(m1+m2)
cpt_server: thinExecutableJar(server+client)
cpt_server: libJar(server+client)
cpt_server: war(server+client)
cpt_server: ear(server+client)





graph:

component  (compiles to jar1,jar2,jar3)   -- depends on a,b,c,d




version handling mk2
----------


follows semantic versioning format:   major.minor.patch[-label]

starts by default on first build at: 0.0.1-label
and label is the username of the account running jc

each subsequent build increments the patch number
major and minor are overridable within the meta config file. when they are changed
the patch number resets back to 1 (for next build)

the label may be specified at runtime for a build, and may be blank (common value for CI build)



ideal CI/CD server
------------

uses the version number the build to identify each run


typical pipeline:

compile+package+unittest     - fast functional testing    - deploy to integration testing env   -  deploy to demo area
(goal seconds to minutes)    (mocks intersystem chatter)     (wipe, smoke test, and int test..     (don't wipe, smoke test,
                                                               inc two rounds of continuous test    and leave continuous tests running)
                                                                   may take some time)


system wide

  once all components deployed              perform system wide
  smoke tests passing                       continuous tests
  continuous tests passed atleast once









----



---

mind set:  small yet powerful unix command line tools
           this way tools are offered to use jc, or parts of jc in any build
           tool of choice (jc is a better java compiler; not a built tool..
           the fact that a separate build tool may not be required blurs this line)

jc                      - compiler  (direct to jars)
                                 (pluggable for efficient extension for things needing to read source code; eg code gen, doc gen etc)
jdown  [<dir>]          - maven repo downloader   ... should jc do this automatically? does that break the separate tools philosophy
jup    <jar> [<src>]    -
jdeptree                - print dependency tree



Cloud Build
Cloud Mosaic
Software Mosaic
Mega Maid
Red 6




--

 how to do dependency management?

 - on clash, select highest version
 - on clash, check whether highest version is backwards compatible with lowest version (if not, error)
 - what is min version of java for libs?


 - suggest unused libs?



repos



To upload to a repo, from command line:

> jc upload [RepoName]


meta:
releaseRepos=a,b,c
releaseSourceCode=true
releaseJavaDocs=true
artifacts=a,b,c   # defaults to 'project'



    <distributionManagement>
        <repository>
            <id>softwaremosaic-nexus</id>
            <name>Releases</name>
            <url>http://nexus.private.softwaremosaic.co.uk:8002/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>softwaremosaic-nexus</id>
            <name>Snapshots</name>
            <url>http://nexus.private.softwaremosaic.co.uk:8002/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>


<settings>
  <servers>
    <server>
       <id>softwaremosaic-nexus</id>
       <username>deployment</username>
       <password>$$$$$$</password>
     </server>
  </servers>
</settings>


Detect SCM
-------

    <scm>
        <developerConnection>scm:svn:<Subversion project path to trunk here></developerConnection>
        <connection>scm:svn:<Subversion project path to trunk here></connection>
        <url><Subversion project path to trunk here></url>
    </scm>


    <url><!-- url here --></url>

    <organization>
       <!-- organization here -->
    </organization>

    <developers>
      <!-- developers here -->
    </developers>


add to .gitignore



mvn idea:idea
   still gets test modules wrong




Q: How to manage dependency clashes
Q: How to know when new versions exist
Q: How long to keep 'old' builds around
Q: How to manage local and remote repositories


idea: place maven repos and dep refs in META-INF
  new bootstrap class loader downloads if dependencies are not found

idea: keep last used timestamp on dependencies
      have a clean out of really old unused stuff
      ttl changable by tags (eg release very long, ck frequent)



Packaging
----

Fat jar or thin jar?

Each module, or one with main?

What if there are multiple mains?


Git support
----

Tag releases
Include git hash in jar files


Plugin support
----



MicroBenchmark support
--------





Usages:

jc    (compile, test, package

jc compile
jc test
jc package


jc install
jc




Repository
==========

On Upload:
- is jar backwards compatible with last version?
    - removing deprecated stuff is okay
- stats on download counts/ref usage
- alert to dependency clashes
- prune unused libs (re-build on use)


- hooks to standard docs
    - release notes
    - bug reports
    - bug stats
    - forums
    - documentation
    - road map
    - voting
    - stack overflow feed
    - code coverage
    - developer stats


- capture exceptions while running


- auto support for jClarity?




AWS


project meta
    ami
    min machine size

environment meta
    facebook credentials
    dns


